Discovering target: Default
Discovering tests from assembly: C:\Users\Raim\documents\visual studio 2015\Projects\Examen2\Examen2\bin\Debug\Examen2.dll
Appdomain Disposed
Test Suite Dump
#0: Examen2/Default - 
#1: Default - 
#2: Examen2 - 
#3: Examen - 
#4: Look for products with less than 10 total Qty that needs backorder - TestAssembly:Examen2/Feature:Examen/Scenario:Look+for+products+with+less+than+10+total+Qty+that+needs+backorder
#5: Order an array of employees - TestAssembly:Examen2/Feature:Examen/Scenario:Order+an+array+of+employees
#6: Filter transactions by type In - TestAssembly:Examen2/Feature:Examen/Scenario:Filter+transactions+by+type+In
#7: Getting max/min values of binary tree - TestAssembly:Examen2/Feature:Examen/Scenario:Getting+max%2fmin+values+of+binary+tree
End: Test Suite Dump
Thread#0:Scheduler: get next test for thread
Thread#:Scheduler: testitem #4 from normal test queue 
Thread#0:Scheduler: considering testitem #4 for thread
Thread#0:Scheduler: using testitem #4 for thread
Thread#0:Scheduler: Test #4 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread #0: creating new test thread executor for Examen2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null (target: Default)
Loading SpecRun type 'TechTalk.SpecRun.Framework.TestAssemblyExecutor' from: C:\Users\Raim\AppData\Local\Temp\VisualStudioTestExplorerExtensions\SpecRun.Runner.1.5.2\tools\TechTalk.SpecRun.Framework.Executor.dll
Thread#0: Test #4/0 is started on thread #0
Thread#0:B:Given I have the follwing products
Thread#0:B:  --- table step argument ---
Thread#0:B:  | Code | Name | Description |
Thread#0:B:  | 1    | A    | an A        |
Thread#0:B:  | 2    | B    | a B         |
Thread#0:B:  | 3    | C    | a C         |
Thread#0:T:done: ExamenProductsTest.GivenIHaveTheFollwingProducts(<table>) (0.2s)
Thread#0:B:And I have the following inventory transactions
Thread#0:B:  --- table step argument ---
Thread#0:B:  | ProductCode | Qty | TransactionType |
Thread#0:B:  | 1           | 10  | In              |
Thread#0:B:  | 1           | 20  | In              |
Thread#0:B:  | 1           | 25  | Out             |
Thread#0:B:  | 2           | 100 | In              |
Thread#0:B:  | 2           | 20  | Out             |
Thread#0:B:  | 3           | 10  | In              |
Thread#0:B:  | 3           | 30  | In              |
Thread#0:T:done: ExamenProductsTest.GivenIHaveTheFollowingInventoryTransactions(<table>) (0.0s)
Thread#0:B:When we check which products needs backorder
Thread#0:T:done: ExamenProductsTest.WhenWeCheckWhichProductsNeedsBackorder() (0.5s)
Thread#0:B:Then the following products will appear that needs back order
Thread#0:B:  --- table step argument ---
Thread#0:B:  | Code | Name | Description |
Thread#0:B:  | 1    | A    | an A        |
Thread#0:T:done: ExamenProductsTest.ThenTheFollowingProductsWillAppearThatNeedsBackOrder(<table>) (0.0s)
Thread#0:Scheduler: get next test for thread
Thread#:Scheduler: testitem #5 from normal test queue 
Thread#0:Scheduler: considering testitem #5 for thread
Thread#0:Scheduler: using testitem #5 for thread
Thread#0:Scheduler: Test #5 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #4/0 is finished on thread #0 as Succeeded within 2.3636703 seconds
Thread#0: Test #5/0 is started on thread #0
Thread#0:B:Given I have the following employees
Thread#0:B:  --- table step argument ---
Thread#0:B:  | Code | Name |
Thread#0:B:  | 1    | C    |
Thread#0:B:  | 2    | A    |
Thread#0:B:  | 3    | B    |
Thread#0:T:done: ExamenSteps.GivenIHaveTheFollowingEmployees(<table>) (0.0s)
Thread#0:B:When we QUICKSORT by name
Thread#0:T:done: ExamenSteps.WhenWeQUICKSORTByName() (0.0s)
Thread#0:B:Then the list should be like this
Thread#0:B:  --- table step argument ---
Thread#0:B:  | Code | Name |
Thread#0:B:  | 2    | A    |
Thread#0:B:  | 3    | B    |
Thread#0:B:  | 1    | C    |
Thread#0:T:Test...
Thread#0:T:Test...
Thread#0:T:Test...
Thread#0:T:done: ExamenSteps.ThenTheListShouldBeLikeThis(<table>) (0.0s)
Thread#0:Scheduler: get next test for thread
Thread#:Scheduler: testitem #6 from normal test queue 
Thread#0:Scheduler: considering testitem #6 for thread
Thread#0:Scheduler: using testitem #6 for thread
Thread#0:Scheduler: Test #6 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #5/0 is finished on thread #0 as Succeeded within 0.0310215 seconds
Thread#0: Test #6/0 is started on thread #0
Thread#0:B:Given I have the following inventory transaction
Thread#0:B:  --- table step argument ---
Thread#0:B:  | ProductCode | Qty | TransactionType |
Thread#0:B:  | 1           | 10  | In              |
Thread#0:B:  | 1           | 20  | In              |
Thread#0:B:  | 1           | 25  | Out             |
Thread#0:B:  | 2           | 100 | In              |
Thread#0:B:  | 2           | 20  | Out             |
Thread#0:B:  | 3           | 10  | In              |
Thread#0:B:  | 3           | 30  | In              |
Thread#0:T:done: ExamenFilterTest.GivenIHaveTheFollowingInventoryTransaction(<table>) (0.0s)
Thread#0:B:When filter by transacion type 'In'
Thread#0:T:done: ExamenFilterTest.WhenFilterByTransacionType("In") (0.0s)
Thread#0:B:Then the transactions should look like
Thread#0:B:  --- table step argument ---
Thread#0:B:  | ProductCode | Qty | TransactionType |
Thread#0:B:  | 1           | 10  | In              |
Thread#0:B:  | 1           | 20  | In              |
Thread#0:B:  | 2           | 100 | In              |
Thread#0:B:  | 3           | 10  | In              |
Thread#0:B:  | 3           | 30  | In              |
Thread#0:T:done: ExamenFilterTest.ThenTheTransactionsShouldLookLike(<table>) (0.0s)
Thread#0:Scheduler: get next test for thread
Thread#:Scheduler: testitem #7 from normal test queue 
Thread#0:Scheduler: considering testitem #7 for thread
Thread#0:Scheduler: using testitem #7 for thread
Thread#0:Scheduler: Test #7 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #6/0 is finished on thread #0 as Succeeded within 0.0170129 seconds
Thread#0: Test #7/0 is started on thread #0
Thread#0:B:Given I have the following tree nodes
Thread#0:B:  --- table step argument ---
Thread#0:B:  | NodeId | Value | Left | Right |
Thread#0:B:  | 1      | 100   | 2    | 3     |
Thread#0:B:  | 2      | 200   | 4    | 5     |
Thread#0:B:  | 3      | 11    | 6    | 7     |
Thread#0:B:  | 4      | 10    | 0    | 0     |
Thread#0:B:  | 5      | 340   | 0    | 0     |
Thread#0:B:  | 6      | 44    | 8    | 0     |
Thread#0:B:  | 7      | 52    | 0    | 0     |
Thread#0:B:  | 8      | 1     | 0    | 0     |
Thread#0:T:done: ExamenMinMaxTest.GivenIHaveTheFollowingTreeNodes(<table>) (0.0s)
Thread#0:B:When get tree stats is called
Thread#0:T:done: ExamenMinMaxTest.WhenGetTreeStatsIsCalled() (0.0s)
Thread#0:B:Then max value should be 340 and min value should be 1
Thread#0:T:done: ExamenMinMaxTest.ThenMaxValueShouldBeAndMinValueShouldBe(340, 1) (0.0s)
Thread#0:Scheduler: get next test for thread
Thread#:Scheduler: at the end of normal test queue
Thread#0:Scheduler: enumerator for thread is at end
Thread#0:Scheduler: No more tests for thread 
Thread#0: Test #7/0 is finished on thread #0 as Succeeded within 0.0240093 seconds
Appdomain Disposed
Thread#-1:Scheduler: get next test for thread
Thread#:Scheduler: at the end of normal test queue
Thread#-1:Scheduler: enumerator for thread is at end
Total: 4
Succeeded: 4
Ignored: 0
Pending: 0
Skipped: 0
Failed: 0
