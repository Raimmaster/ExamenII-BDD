// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Examen2
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Examen", Description="\tAs a professor\r\n\tI want my students to implemente these scenarios\r\n\tSo that they" +
        " can pass the class", SourceFile="Examen.feature", SourceLine=0)]
    public partial class ExamenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Examen.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Examen", "\tAs a professor\r\n\tI want my students to implemente these scenarios\r\n\tSo that they" +
                    " can pass the class", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Look for products with less than 10 total Qty that needs backorder", SourceLine=5)]
        public virtual void LookForProductsWithLessThan10TotalQtyThatNeedsBackorder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Look for products with less than 10 total Qty that needs backorder", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "Description"});
            table1.AddRow(new string[] {
                        "1",
                        "A",
                        "an A"});
            table1.AddRow(new string[] {
                        "2",
                        "B",
                        "a B"});
            table1.AddRow(new string[] {
                        "3",
                        "C",
                        "a C"});
#line 7
 testRunner.Given("I have the follwing products", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductCode",
                        "Qty",
                        "TransactionType"});
            table2.AddRow(new string[] {
                        "1",
                        "10",
                        "In"});
            table2.AddRow(new string[] {
                        "1",
                        "20",
                        "In"});
            table2.AddRow(new string[] {
                        "1",
                        "25",
                        "Out"});
            table2.AddRow(new string[] {
                        "2",
                        "100",
                        "In"});
            table2.AddRow(new string[] {
                        "2",
                        "20",
                        "Out"});
            table2.AddRow(new string[] {
                        "3",
                        "10",
                        "In"});
            table2.AddRow(new string[] {
                        "3",
                        "30",
                        "In"});
#line 13
 testRunner.And("I have the following inventory transactions", ((string)(null)), table2, "And ");
#line 23
 testRunner.When("we check which products needs backorder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "Description"});
            table3.AddRow(new string[] {
                        "1",
                        "A",
                        "an A"});
#line 24
 testRunner.Then("the following products will appear that needs back order", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Order an array of employees", SourceLine=27)]
        public virtual void OrderAnArrayOfEmployees()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order an array of employees", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name"});
            table4.AddRow(new string[] {
                        "1",
                        "C"});
            table4.AddRow(new string[] {
                        "2",
                        "A"});
            table4.AddRow(new string[] {
                        "3",
                        "B"});
#line 29
 testRunner.Given("I have the following employees", ((string)(null)), table4, "Given ");
#line 34
 testRunner.When("we QUICKSORT by name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name"});
            table5.AddRow(new string[] {
                        "2",
                        "A"});
            table5.AddRow(new string[] {
                        "3",
                        "B"});
            table5.AddRow(new string[] {
                        "1",
                        "C"});
#line 35
 testRunner.Then("the list should be like this", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Filter transactions by type In", SourceLine=40)]
        public virtual void FilterTransactionsByTypeIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter transactions by type In", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductCode",
                        "Qty",
                        "TransactionType"});
            table6.AddRow(new string[] {
                        "1",
                        "10",
                        "In"});
            table6.AddRow(new string[] {
                        "1",
                        "20",
                        "In"});
            table6.AddRow(new string[] {
                        "1",
                        "25",
                        "Out"});
            table6.AddRow(new string[] {
                        "2",
                        "100",
                        "In"});
            table6.AddRow(new string[] {
                        "2",
                        "20",
                        "Out"});
            table6.AddRow(new string[] {
                        "3",
                        "10",
                        "In"});
            table6.AddRow(new string[] {
                        "3",
                        "30",
                        "In"});
#line 42
 testRunner.Given("I have the following inventory transaction", ((string)(null)), table6, "Given ");
#line 51
 testRunner.When("filter by transacion type \'In\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductCode",
                        "Qty",
                        "TransactionType"});
            table7.AddRow(new string[] {
                        "1",
                        "10",
                        "In"});
            table7.AddRow(new string[] {
                        "1",
                        "20",
                        "In"});
            table7.AddRow(new string[] {
                        "2",
                        "100",
                        "In"});
            table7.AddRow(new string[] {
                        "3",
                        "10",
                        "In"});
            table7.AddRow(new string[] {
                        "3",
                        "30",
                        "In"});
#line 52
 testRunner.Then("the transactions should look like", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Getting max/min values of binary tree", SourceLine=59)]
        public virtual void GettingMaxMinValuesOfBinaryTree()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting max/min values of binary tree", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "NodeId",
                        "Value",
                        "Left",
                        "Right"});
            table8.AddRow(new string[] {
                        "1",
                        "100",
                        "2",
                        "3"});
            table8.AddRow(new string[] {
                        "2",
                        "200",
                        "4",
                        "5"});
            table8.AddRow(new string[] {
                        "3",
                        "11",
                        "6",
                        "7"});
            table8.AddRow(new string[] {
                        "4",
                        "10",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "5",
                        "340",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "6",
                        "44",
                        "8",
                        "0"});
            table8.AddRow(new string[] {
                        "7",
                        "52",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "8",
                        "1",
                        "0",
                        "0"});
#line 61
 testRunner.Given("I have the following tree nodes", ((string)(null)), table8, "Given ");
#line 73
 testRunner.When("get tree stats is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("max value should be 340 and min value should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
